//cosine = new CosineMethod(users, items);
            //cosine.calculateCosineSimilarity();
            //var itemsArray = items.GetUsersPerItemList();
            //Dictionary<string, string> intersectDictionary = new Dictionary<string, string>();
            //for (int i = 0; i < itemsArray.Keys.Count; i++)
            //{
            //    var item1Users = itemsArray.ElementAt(i).Value.Keys;
            //    for (int j = i + 1; j < itemsArray.Keys.Count; j++)
            //    {
            //        var item2Users = itemsArray.ElementAt(j).Value.Keys;
            //        List<string> intersectList = item1Users.Intersect(item2Users).ToList();
            //        for (int k = 0; k < intersectList.Count; k++)
            //        {
            //            string userId = intersectList.ElementAt(k);
            //            for (int l = k+1; l < intersectList.Count; l++)
            //            {
            //                if (!intersectDictionary.Keys.Contains(userId))
            //                    intersectDictionary.Add(userId, intersectList.ElementAt(l));
            //                else
            //                {
            //                    intersectDictionary[userId] = intersectList.ElementAt(l);
            //                }
            //            }    
            //        }
            //    }
              // run pearson on one user
            /*string[] usersArray = users.getUsersArray();
            
            for (int i = 0; i < usersArray.Length; i++)
            {

                for (int j = i + 1; j < usersArray.Length; j++)
                {
                    User u2 = users.getUserById(usersArray[j]);
                    User u1 = users.getUserById(usersArray[i]);
                    logger.debug("calcualting similarity for user " + "[" + u1.GetId().ToString() + "]" + " with user " + "[" + u2.GetId().ToString() + "]");
                    {
                        foreach (IPredictionMethod method in predictionMethodsDictionary.Values)
                        {
                            double similarity = method.calculateSimilarity(u1, u2);
                            if (similarity != 0)
                            {
                                u1.addSimilarUser(method.GetPredictionMethod(), u2, similarity);
                                u2.addSimilarUser(method.GetPredictionMethod(), u1, similarity);
                            }
                        }
                    }
                }
            timer.Stop();
            logger.debug("Calculation time: " + timer.Elapsed.ToString());
            logger.debug("");*/


            
             

            //////////// non parallel execution ////////////
            
            /*foreach(User user2 in users)
            {
                //if (!user2 == user1)
                //logger.debug("calcualting similarity for user " + "[" + user1.GetId().ToString() + "]" + " with user " + "[" + user2.GetId().ToString() + "]");
                double similarity = predictionMethod.calculateSimilarity(user1, user2);
                if (similarity != 0)
                {
                    user1.addSimilarUser(predictionMethod.GetPredictionMethod(), user2, similarity);
                    //user2.addSimilarUser(predictionMethod.GetPredictionMethod(), user1, similarity);
                }
            }
            timer.Stop();
            logger.debug("Calculation time: " + timer.Elapsed.ToString());
            logger.debug("");*/